/*
 * Copyright (c) 2018, Mercenary Creators Company. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.7.2')
        classpath(group: 'commons-codec', name: 'commons-codec', version: '1.11')
        classpath(group: 'commons-logging', name: 'commons-logging', version: '1.2')
        classpath(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6')
        classpath(group: 'org.owasp', name: 'dependency-check-gradle', version: '3.3.1')
        classpath(group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.6.2')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'pmd'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'application'
apply plugin: 'org.sonarqube'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

targetCompatibility = 1.8

group = 'co.mercenary-creators'

version = '0.1.0-SNAPSHOT'

task doJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath + buildscript.configurations.classpath
    destinationDir = project.file("${buildDir}/docs/javadoc")
    includes = [
            'co/mercenary/creators/**'
    ]
    title = "${getProjectCommonName()}"
    (options as StandardJavadocDocletOptions).with {
        links = getJavaDocLinks()
        stylesheetFile = project.file('config/javadoc/mercenary.css')
        bottom = "<div><h4 class=\"footer\"><a href=\"${getBuildGITHomeURL()}\" target=\"_blank\">${getProjectCommonName()} - Copyright &copy; 2018, Mercenary Creators Company</a> - <a href=\"${getBuildGITCommitHash()}\" target=\"_blank\">${getBuildModuleVersion()}</a> - <a href=\"mailto:deansjones@gmail.com\">Author: Dean S. Jones</a></h4></div>"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadoc"
}

compileJava.dependsOn(processResources)

eclipse { classpath { downloadJavadoc = true } }

checkstyle {
    toolVersion = '7.7'
    ignoreFailures = true
}

tasks.withType(Checkstyle) { source 'src/main' }

pmd {
    ignoreFailures = true
    toolVersion = '5.6.1'
    ruleSets = [
        'java-basic',
        'java-braces',
        'java-empty',
        'java-optimizations',
        'java-unusedcode'
    ]
}

findbugs {
    ignoreFailures = true
    toolVersion = '3.0.1'
    effort = 'max'
    excludeFilter = project.file('config/findbugs/filter.xml')
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

dependencyCheck {
    failOnError = false
    outputDirectory = "${buildDir}/reports/cve"
    suppressionFile = project.file('config/cve/suppress.xml')
}

task checkCodeQuality { doLast { println ':checkCodeQuality-done' } }

checkCodeQuality.dependsOn checkstyleMain,pmdMain,findbugsMain,dependencyCheckAnalyze

repositories {
    mavenCentral()
    maven {
    	url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

jar.enabled = true

[bootJar, distTar, bootDistTar, bootDistZip, startScripts]*.enabled = false

configurations.archives.artifacts.removeIf { !it.archiveTask.is(distZip) }

dependencies {
    compile(group: 'co.mercenary-creators', name: 'mercenary-creators-minio', version: '0.1.0-SNAPSHOT')
    compile('org.springframework.boot:spring-boot-autoconfigure')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${JACKSON_DATABIND_VERSION}")
    compile(group: 'joda-time', name: 'joda-time', version: '2.10')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    runtime('org.springframework.boot:spring-boot-devtools')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

signing { sign configurations.archives }

def String getBuildModuleVersion() {
    version
}

def String getProjectCommonName() {
    'Mercenary Creators Minio Autoconfigure'
}

def String getBuildDate() {
    (new Date()).toString()
}

def String getBuildServerHost() {
    try {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e) {
        'localhost'
    }
}

def String getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def String getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def String getBuildServerBuild() {
    System.getenv('BUILD_DISPLAY_NAME') ?: "Gradle version ${gradle.gradleVersion}"
}

def String getBuildGITHomeURL() {
    'https://github.com/mercenary-creators/' + getProjectArtifactID()
}

def String getBuildGITCommitHash() {
    getBuildGITHomeURL() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def String getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def String getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

def String getProjectArtifactID() {
    getProjectTitle().toLowerCase()
}

def String getProjectTitle() {
    getProjectCommonName().replaceAll(' ', '-')
}

def String getRepoUploadArchives() {
    getBuildModuleVersion().endsWith('SNAPSHOT') ? 'https://oss.sonatype.org/content/repositories/snapshots/' : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def String getUserNameUploadArchives() {
    project.findProperty('sonatype_username') ?: ''
}

def String getPassWordUploadArchives() {
    project.findProperty('sonatype_password') ?: ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: getRepoUploadArchives()) {
                authentication(userName: getUserNameUploadArchives(), password: getPassWordUploadArchives())
            }
            pom.project {
                name 'Mercenary Creators Minio Autoconfigure'
                packaging 'jar'
                description 'Mercenary Creators Minio Autoconfigure.'
                url 'https://github.com/mercenary-creators/mercenary-creators-minio-autoconfigure'
                scm {
                    url 'scm:git@github.com:mercenary-creators/mercenary-creators-minio-autoconfigure.git'
                    connection 'scm:git@github.com:mercenary-creators/mercenary-creators-minio-autoconfigure.git'
                    developerConnection 'scm:git@github.com:mercenary-creators/mercenary-creators-minio-autoconfigure.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'sprocketnyc'
                        name 'Dean S. Jones'
                        email 'deansjones@gmail.com'
                        url 'https://www.themodernway.com'
                    }
                }
            }
        }
    }
}

def List<String> getJavaDocLinks() {
    def list = []
    def data = project.file('config/javadoc/JAVADOC_LINK_SITES.txt')
    if (data.exists()) {
        data.eachLine { line ->
            list << line
        }
    }
    list
}
